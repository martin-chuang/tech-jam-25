version: "3.8"

services:
  # Flask Backend with Hot Reload
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      - "5000:5000"
    volumes:
      # Mount source code for hot reload
      - ./backend:/app/backend
      - ./requirements.txt:/app/requirements.txt
      - /app/backend/__pycache__
      - /app/backend/src/__pycache__
    env_file:
      - .env.docker
    environment:
      # - DB_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      # - postgres
      - redis
    networks:
      - tiktok-network
    restart: unless-stopped

  # PostgreSQL Database
  # postgres:
  #   image: postgres:15-alpine
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     - POSTGRES_DB=tiktok_techjam_dev
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./backend/db/init:/docker-entrypoint-initdb.d/
  #   networks:
  #     - tiktok-network
  #   restart: unless-stopped

  encryption:
    build:
      context: ./app/components/homomorphic_encryption
      dockerfile: Dockerfile
    volumes:
      - ./backend/app/components/homomorphic_encryption:/app
    networks:
      - tiktok-network
    restart: unless-stopped

  # Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tiktok-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Frontend (if needed later)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:5000/api/v1
  #     - CHOKIDAR_USEPOLLING=true
  #   depends_on:
  #     - backend
  #   networks:
  #     - tiktok-network
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  tiktok-network:
    driver: bridge
